package com.voituri.ridesharing.domain;

import static com.voituri.ridesharing.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class RideRequestAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRideRequestAllPropertiesEquals(RideRequest expected, RideRequest actual) {
        assertRideRequestAutoGeneratedPropertiesEquals(expected, actual);
        assertRideRequestAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRideRequestAllUpdatablePropertiesEquals(RideRequest expected, RideRequest actual) {
        assertRideRequestUpdatableFieldsEquals(expected, actual);
        assertRideRequestUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRideRequestAutoGeneratedPropertiesEquals(RideRequest expected, RideRequest actual) {
        assertThat(expected)
            .as("Verify RideRequest auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRideRequestUpdatableFieldsEquals(RideRequest expected, RideRequest actual) {
        assertThat(expected)
            .as("Verify RideRequest relevant properties")
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(
                e ->
                    assertThat(e.getRequestTime())
                        .as("check requestTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getRequestTime())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRideRequestUpdatableRelationshipsEquals(RideRequest expected, RideRequest actual) {
        assertThat(expected)
            .as("Verify RideRequest relationships")
            .satisfies(e -> assertThat(e.getRide()).as("check ride").isEqualTo(actual.getRide()));
    }
}
